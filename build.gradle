plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'jacoco'
	id 'org.sonarqube' version '4.4.1.3373'
	id 'com.diffplug.spotless' version '6.21.0'
}

group = 'gigedi'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'

	//queryDSL
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'

	compileOnly 'org.projectlombok:lombok'

	runtimeOnly 'com.mysql:mysql-connector-j'

	annotationProcessor 'org.projectlombok:lombok'

	// Test
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'com.h2database:h2'

	// Sentry
	implementation 'io.sentry:sentry-spring-boot-starter:6.27.0'
	implementation 'io.sentry:sentry-logback:6.27.0'

	// Spring Security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.security:spring-security-test'
	implementation 'org.springframework.security:spring-security-oauth2-client'
	implementation 'org.springframework.security:spring-security-oauth2-jose'

	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
}

jacoco {
	toolVersion = "0.8.12"
}

def jacocoDir = layout.buildDirectory.dir("reports/")

def QDomains = []
for (qPattern in '*.QA'..'*.QZ') { // qPattern = '*.QA', '*.QB', ... '*.QZ'
	QDomains.add(qPattern + '*')
}

def jacocoExcludePatterns = [
		// 측정 안하고 싶은 패턴
		"**/*Application*",
		"**/*Config*",
		"**/*Exception*",
		"**/*Request*",
		"**/*Response*",
		"**/*Dto*",
		"**/*Interceptor*",
		"**/*Filter*",
		"**/*Resolver*",
		"**/*Entity*",
		"**/*Error*/**",
		"**/test/**",
		"**/global/**",
		"**/resources/**"
]

sonar {
	properties {
		property "sonar.projectKey", "GIGEDI_GIGEDI-BE"
		property "sonar.organization", "gigedi"
		property "sonar.host.url", "https://sonarcloud.io"
		property 'sonar.sources', 'src'
		property 'sonar.language', 'java'
		property 'sonar.sourceEncoding', 'UTF-8'
		property 'sonar.test.exclusions', jacocoExcludePatterns.join(',')
		property 'sonar.test.inclusions', '**/*Test.java'
		property 'sonar.java.coveragePlugin', 'jacoco'
		property 'sonar.coverage.jacoco.xmlReportPaths', jacocoDir.get().file("jacoco/index.xml").asFile
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true
			element = 'CLASS'
			excludes = jacocoExcludePatterns + QDomains
		}
	}
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}

jacocoTestReport {
	dependsOn test	// 테스트가 수행되어야만 report를 생성할 수 있도록 설정
	reports {
		html.required.set(true)
		xml.required.set(true)
		csv.required.set(true)
		html.destination jacocoDir.get().file("jacoco/index.html").asFile
		xml.destination jacocoDir.get().file("jacoco/index.xml").asFile
		csv.destination jacocoDir.get().file("jacoco/index.csv").asFile
	}

	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, excludes: jacocoExcludePatterns + QDomains) // Querydsl 관련 제거
				})
		)
	}
	finalizedBy jacocoTestCoverageVerification
}

spotless {
	java {
		// Google Java 포맷 적용
		googleJavaFormat().aosp()
		// 아래 순서로 import문 정렬
		importOrder("java", "javax", "jakarta", "org", "com")
		// 사용하지 않는 import 제거
		removeUnusedImports()
		// 각 라인 끝에 있는 공백을 제거
		trimTrailingWhitespace()
		// 파일 끝에 새로운 라인 추가
		endWithNewline()
	}
}

// git commit시 자동으로 spotless 적용되도록 설정
// 최초 적용시 && script 변경시 ./gradlew compileJava 한번 실행해주세요
tasks.register("updateGitHooks", Copy) {
	from(file("${rootProject.rootDir}/scripts/pre-commit"))
	into(file("${rootProject.rootDir}/.git/hooks"))
}

tasks.register('makeGitHooksExecutable', Exec) {
	if (System.getProperty("os.name").contains("Windows")) {
		commandLine("attrib", "+x", "${rootProject.rootDir}/.git/hooks/pre-commit")
	} else {
		commandLine("chmod", "+x", "${rootProject.rootDir}/.git/hooks/pre-commit")
	}
	dependsOn("updateGitHooks")
}

tasks.withType(JavaCompile) {
	dependsOn("makeGitHooksExecutable")
}

